package csen1002.tests.task2;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.api.Timeout.ThreadMode;

import csen1002.main.task2.NfaToDfa;

@Timeout(value = 5, unit = TimeUnit.SECONDS, threadMode = ThreadMode.SEPARATE_THREAD)
public class Task2TestsBatch7 {

	@Test
	public void testNfa1() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#f;g;i;t;w#0,w,1;1,i,2;2,t,3;3,e,8;4,f,5;5,g,6;6,e,8;7,e,0;7,e,4#7#8");
		assertEquals("-1;0/4/7;1;2;3/8;5;6/8#f;g;i;t;w#-1,f,-1;-1,g,-1;-1,i,-1;-1,t,-1;-1,w,-1;0/4/7,f,5;0/4/7,g,-1;0/4/7,i,-1;0/4/7,t,-1;0/4/7,w,1;1,f,-1;1,g,-1;1,i,2;1,t,-1;1,w,-1;2,f,-1;2,g,-1;2,i,-1;2,t,3/8;2,w,-1;3/8,f,-1;3/8,g,-1;3/8,i,-1;3/8,t,-1;3/8,w,-1;5,f,-1;5,g,6/8;5,i,-1;5,t,-1;5,w,-1;6/8,f,-1;6/8,g,-1;6/8,i,-1;6/8,t,-1;6/8,w,-1#0/4/7#3/8;6/8", nfaToDfa.toString());
	}

	@Test
	public void testNfa2() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8#b;c;f;y#0,b,0;0,b,2;0,b,3;0,b,4;0,b,5;0,b,7;0,b,8;0,c,0;0,c,1;0,c,2;0,c,3;0,c,4;0,c,6;0,c,8;0,e,2;0,f,1;0,f,3;0,f,4;0,f,7;0,y,3;0,y,5;0,y,6;0,y,7;0,y,8;1,b,2;1,b,3;1,b,4;1,b,5;1,b,6;1,b,7;1,b,8;1,c,0;1,c,1;1,c,3;1,c,4;1,c,6;1,c,7;1,e,3;1,e,5;1,f,0;1,f,1;1,f,3;1,f,5;1,f,7;1,f,8;1,y,0;1,y,2;1,y,5;1,y,6;1,y,7;1,y,8;2,b,0;2,b,1;2,b,4;2,b,5;2,b,6;2,b,7;2,b,8;2,c,1;2,c,2;2,c,3;2,c,4;2,c,5;2,f,0;2,f,1;2,f,2;2,f,5;2,f,6;2,f,8;2,y,1;2,y,2;2,y,3;2,y,4;2,y,8;3,b,1;3,b,3;3,b,4;3,b,5;3,b,6;3,b,8;3,c,0;3,c,2;3,c,3;3,c,4;3,c,5;3,c,8;3,e,6;3,f,2;3,f,3;3,f,4;3,f,5;3,f,6;3,f,8;3,y,0;3,y,2;3,y,3;3,y,5;3,y,7;3,y,8;4,b,0;4,b,1;4,b,3;4,b,4;4,b,7;4,b,8;4,c,0;4,c,1;4,c,2;4,c,3;4,c,6;4,f,0;4,f,1;4,f,2;4,f,4;4,f,6;4,y,0;4,y,1;4,y,2;4,y,5;4,y,7;4,y,8;5,b,0;5,b,1;5,b,2;5,b,3;5,b,5;5,b,6;5,b,8;5,c,1;5,c,3;5,c,4;5,c,5;5,c,6;5,c,7;5,c,8;5,e,6;5,e,7;5,f,1;5,f,2;5,f,3;5,f,4;5,y,3;5,y,4;5,y,5;5,y,6;5,y,8;6,b,3;6,b,4;6,b,5;6,b,6;6,b,8;6,c,0;6,c,1;6,c,2;6,c,3;6,c,4;6,c,5;6,c,6;6,e,8;6,f,1;6,f,2;6,f,4;6,f,6;6,f,8;6,y,0;6,y,1;6,y,2;6,y,5;6,y,7;7,b,0;7,b,1;7,b,3;7,b,5;7,b,7;7,b,8;7,c,0;7,c,1;7,c,2;7,c,3;7,c,4;7,c,7;7,c,8;7,e,4;7,f,1;7,f,3;7,f,4;7,f,7;7,f,8;7,y,0;7,y,2;7,y,3;7,y,4;7,y,5;7,y,7;7,y,8;8,b,1;8,b,2;8,b,3;8,b,4;8,b,7;8,b,8;8,c,1;8,c,3;8,c,5;8,c,7;8,e,7;8,f,0;8,f,1;8,f,2;8,f,4;8,f,5;8,f,6;8,f,8;8,y,1;8,y,3;8,y,4;8,y,5;8,y,6;8,y,7;8,y,8#4#3;4");
		assertEquals("0/1/2/3/4/5/6/7/8;4#b;c;f;y#0/1/2/3/4/5/6/7/8,b,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,c,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,f,0/1/2/3/4/5/6/7/8;0/1/2/3/4/5/6/7/8,y,0/1/2/3/4/5/6/7/8;4,b,0/1/2/3/4/5/6/7/8;4,c,0/1/2/3/4/5/6/7/8;4,f,0/1/2/3/4/5/6/7/8;4,y,0/1/2/3/4/5/6/7/8#4#0/1/2/3/4/5/6/7/8;4", nfaToDfa.toString());
	}

	@Test
	public void testNfa3() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#f;p#0,f,1;0,f,3;0,f,4;0,f,5;0,f,6;0,f,7;0,f,8;0,p,0;0,p,1;0,p,2;0,p,7;1,f,4;1,f,6;1,f,7;1,f,10;1,p,0;1,p,1;1,p,2;1,p,3;1,p,5;1,p,8;1,p,10;2,f,4;2,f,6;2,f,7;2,f,9;2,p,4;2,p,5;2,p,6;2,p,7;2,p,8;2,p,10;3,f,0;3,f,2;3,f,3;3,f,4;3,f,5;3,f,7;3,f,10;3,p,0;3,p,1;3,p,2;3,p,5;3,p,6;3,p,7;4,f,0;4,f,1;4,f,2;4,f,3;4,f,4;4,f,5;4,f,10;4,p,0;4,p,1;4,p,4;4,p,5;4,p,6;4,p,8;4,p,9;5,f,0;5,f,4;5,f,6;5,f,7;5,f,8;5,p,1;5,p,2;5,p,3;5,p,5;5,p,6;5,p,9;5,p,10;6,f,0;6,f,1;6,f,3;6,f,5;6,f,9;6,p,0;6,p,1;6,p,3;6,p,4;6,p,6;6,p,10;7,f,1;7,f,2;7,f,4;7,f,5;7,f,7;7,f,8;7,f,10;7,p,1;7,p,2;7,p,3;7,p,8;7,p,9;7,p,10;8,f,1;8,f,2;8,f,4;8,f,6;8,f,7;8,f,8;8,f,9;8,p,1;8,p,2;8,p,3;8,p,7;8,p,8;8,p,10;9,f,0;9,f,2;9,f,3;9,f,4;9,f,7;9,f,8;9,f,9;9,p,1;9,p,3;9,p,7;9,p,8;9,p,9;9,p,10;10,f,0;10,f,4;10,f,7;10,f,9;10,p,1;10,p,3;10,p,5;10,p,7;10,p,9#9#2;5;7;8");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/5/6/7/8/9/10;0/2/3/4/7/8/9;1/3/7/8/9/10;9#f;p#0/1/2/3/4/5/6/7/8/9/10,f,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,p,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/5/6/7/8/9/10,f,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/5/6/7/8/9/10,p,0/1/2/3/4/5/6/7/8/9/10;0/2/3/4/7/8/9,f,0/1/2/3/4/5/6/7/8/9/10;0/2/3/4/7/8/9,p,0/1/2/3/4/5/6/7/8/9/10;1/3/7/8/9/10,f,0/1/2/3/4/5/6/7/8/9/10;1/3/7/8/9/10,p,0/1/2/3/5/6/7/8/9/10;9,f,0/2/3/4/7/8/9;9,p,1/3/7/8/9/10#9#0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/5/6/7/8/9/10;0/2/3/4/7/8/9;1/3/7/8/9/10", nfaToDfa.toString());
	}

	@Test
	public void testNfa4() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#b;o;v#0,b,0;0,b,1;0,b,3;0,b,4;0,b,5;0,b,7;0,e,0;0,o,0;0,o,1;0,o,2;0,o,3;0,o,4;0,o,6;0,o,7;0,v,1;0,v,2;0,v,5;0,v,7;1,b,0;1,b,2;1,b,3;1,b,4;1,b,5;1,b,6;1,e,1;1,o,0;1,o,3;1,o,5;1,o,6;1,v,0;1,v,4;1,v,5;1,v,6;1,v,7;2,b,1;2,b,2;2,b,3;2,b,5;2,b,6;2,b,7;2,e,2;2,o,0;2,o,1;2,o,2;2,o,3;2,o,4;2,o,6;2,o,7;2,v,0;2,v,1;2,v,2;2,v,3;2,v,4;2,v,5;3,b,0;3,b,2;3,b,5;3,b,7;3,e,3;3,o,0;3,o,2;3,o,3;3,o,4;3,o,6;3,v,0;3,v,2;3,v,3;3,v,4;3,v,5;3,v,6;3,v,7;4,b,0;4,b,2;4,b,5;4,b,7;4,e,4;4,o,0;4,o,1;4,o,4;4,o,5;4,o,6;4,o,7;4,v,0;4,v,1;4,v,5;4,v,7;5,b,0;5,b,1;5,b,3;5,b,4;5,b,5;5,b,6;5,o,1;5,o,3;5,o,5;5,o,7;5,v,0;5,v,1;5,v,2;5,v,4;5,v,6;6,b,2;6,b,3;6,b,6;6,b,7;6,e,6;6,o,1;6,o,3;6,o,4;6,o,5;6,o,6;6,o,7;6,v,1;6,v,2;6,v,4;6,v,7;7,b,0;7,b,2;7,b,3;7,b,4;7,b,6;7,b,7;7,o,0;7,o,2;7,o,3;7,o,5;7,o,6;7,o,7;7,v,2;7,v,5;7,v,6;7,v,7#0#0;4;5;7");
		assertEquals("0;0/1/2/3/4/5/6/7;0/1/2/3/4/6/7;0/1/3/4/5/7;1/2/5/7#b;o;v#0,b,0/1/3/4/5/7;0,o,0/1/2/3/4/6/7;0,v,1/2/5/7;0/1/2/3/4/5/6/7,b,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,o,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,v,0/1/2/3/4/5/6/7;0/1/2/3/4/6/7,b,0/1/2/3/4/5/6/7;0/1/2/3/4/6/7,o,0/1/2/3/4/5/6/7;0/1/2/3/4/6/7,v,0/1/2/3/4/5/6/7;0/1/3/4/5/7,b,0/1/2/3/4/5/6/7;0/1/3/4/5/7,o,0/1/2/3/4/5/6/7;0/1/3/4/5/7,v,0/1/2/3/4/5/6/7;1/2/5/7,b,0/1/2/3/4/5/6/7;1/2/5/7,o,0/1/2/3/4/5/6/7;1/2/5/7,v,0/1/2/3/4/5/6/7#0#0;0/1/2/3/4/5/6/7;0/1/2/3/4/6/7;0/1/3/4/5/7;1/2/5/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa5() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10;11#p;q#0,p,1;0,p,2;0,p,4;0,p,5;0,p,7;0,p,10;0,p,11;0,q,2;0,q,3;0,q,7;0,q,9;1,p,0;1,p,1;1,p,8;1,p,9;1,p,11;1,q,4;1,q,5;1,q,7;1,q,8;1,q,10;2,p,0;2,p,1;2,p,2;2,p,3;2,p,5;2,p,9;2,p,11;2,q,2;2,q,5;2,q,6;2,q,7;2,q,9;2,q,10;2,q,11;3,p,1;3,p,4;3,p,8;3,p,9;3,p,10;3,p,11;3,q,2;3,q,3;3,q,5;3,q,8;4,p,1;4,p,2;4,p,3;4,p,6;4,p,9;4,p,10;4,q,1;4,q,2;4,q,4;4,q,5;4,q,6;4,q,9;5,p,3;5,p,4;5,p,5;5,p,7;5,p,8;5,p,9;5,p,11;5,q,0;5,q,5;5,q,7;5,q,10;6,p,4;6,p,5;6,p,8;6,p,9;6,p,10;6,q,0;6,q,5;6,q,6;6,q,8;6,q,10;7,p,0;7,p,5;7,p,6;7,p,10;7,q,2;7,q,5;7,q,7;7,q,9;7,q,11;8,p,0;8,p,2;8,p,3;8,p,6;8,p,7;8,p,10;8,p,11;8,q,0;8,q,1;8,q,6;8,q,8;8,q,9;8,q,10;9,p,0;9,p,6;9,p,7;9,p,9;9,p,10;9,q,0;9,q,3;9,q,4;9,q,6;9,q,9;9,q,10;10,p,0;10,p,1;10,p,2;10,p,7;10,p,11;10,q,1;10,q,2;10,q,3;10,q,4;10,q,7;10,q,8;10,q,10;11,p,1;11,p,4;11,p,8;11,p,9;11,q,2;11,q,5;11,q,8;11,q,10#6#2;3;9");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10/11;0/5/6/8/10;4/5/8/9/10;6#p;q#0/1/2/3/4/5/6/7/8/9/10,p,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/4/5/6/7/8/9/10,q,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/4/5/6/7/8/9/10/11,p,0/1/2/3/4/5/6/7/8/9/10/11;0/1/2/3/4/5/6/7/8/9/10/11,q,0/1/2/3/4/5/6/7/8/9/10/11;0/5/6/8/10,p,0/1/2/3/4/5/6/7/8/9/10/11;0/5/6/8/10,q,0/1/2/3/4/5/6/7/8/9/10;4/5/8/9/10,p,0/1/2/3/4/5/6/7/8/9/10/11;4/5/8/9/10,q,0/1/2/3/4/5/6/7/8/9/10;6,p,4/5/8/9/10;6,q,0/5/6/8/10#6#0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10/11;4/5/8/9/10", nfaToDfa.toString());
	}

	@Test
	public void testNfa6() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#c;j;n;s#0,c,0;0,c,1;0,c,2;0,c,3;0,c,6;0,e,4;0,e,6;0,j,0;0,j,1;0,j,3;0,j,4;0,j,5;0,j,7;0,n,1;0,n,2;0,n,3;0,n,4;0,n,5;0,n,6;0,s,1;0,s,2;0,s,3;0,s,4;0,s,7;1,c,1;1,c,3;1,c,4;1,c,7;1,e,3;1,j,0;1,j,2;1,j,3;1,j,4;1,j,5;1,j,6;1,j,7;1,n,0;1,n,1;1,n,2;1,n,3;1,n,5;1,n,6;1,n,7;1,s,0;1,s,3;1,s,5;1,s,6;2,c,0;2,c,1;2,c,2;2,c,3;2,c,5;2,c,6;2,c,7;2,j,0;2,j,1;2,j,3;2,j,5;2,n,2;2,n,3;2,n,5;2,n,7;2,s,2;2,s,4;2,s,5;2,s,6;3,c,1;3,c,2;3,c,3;3,c,4;3,c,5;3,c,6;3,j,0;3,j,1;3,j,2;3,j,5;3,j,7;3,n,1;3,n,2;3,n,6;3,n,7;3,s,0;3,s,1;3,s,4;3,s,5;3,s,6;3,s,7;4,c,0;4,c,1;4,c,5;4,c,6;4,c,7;4,e,0;4,j,0;4,j,2;4,j,3;4,j,4;4,j,5;4,j,6;4,n,0;4,n,1;4,n,2;4,n,4;4,n,5;4,n,6;4,n,7;4,s,0;4,s,1;4,s,2;4,s,3;4,s,4;4,s,6;5,c,0;5,c,1;5,c,4;5,c,6;5,c,7;5,j,0;5,j,1;5,j,2;5,j,4;5,j,5;5,j,6;5,j,7;5,n,0;5,n,1;5,n,2;5,n,3;5,n,4;5,n,5;5,n,6;5,s,1;5,s,2;5,s,4;5,s,5;5,s,6;5,s,7;6,c,0;6,c,2;6,c,5;6,c,6;6,c,7;6,e,7;6,j,0;6,j,3;6,j,4;6,j,7;6,n,0;6,n,1;6,n,2;6,n,3;6,n,4;6,n,6;6,n,7;6,s,0;6,s,3;6,s,5;6,s,6;6,s,7;7,c,0;7,c,1;7,c,2;7,c,3;7,c,4;7,c,6;7,e,2;7,e,6;7,j,0;7,j,2;7,j,3;7,j,4;7,j,5;7,j,6;7,j,7;7,n,0;7,n,1;7,n,2;7,n,3;7,n,4;7,n,5;7,n,6;7,s,3;7,s,4;7,s,5;7,s,6;7,s,7#4#1;2;3;7");
		assertEquals("0/1/2/3/4/5/6/7;0/2/4/6/7#c;j;n;s#0/1/2/3/4/5/6/7,c,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,j,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,n,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,s,0/1/2/3/4/5/6/7;0/2/4/6/7,c,0/1/2/3/4/5/6/7;0/2/4/6/7,j,0/1/2/3/4/5/6/7;0/2/4/6/7,n,0/1/2/3/4/5/6/7;0/2/4/6/7,s,0/1/2/3/4/5/6/7#0/2/4/6/7#0/1/2/3/4/5/6/7;0/2/4/6/7", nfaToDfa.toString());
	}

	@Test
	public void testNfa7() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#h;j;o;x#0,e,1;0,h,0;0,h,1;0,h,8;0,h,10;0,j,1;0,j,2;0,j,3;0,j,5;0,j,6;0,j,7;0,j,10;0,o,3;0,o,4;0,o,5;0,o,9;0,x,1;0,x,3;0,x,5;0,x,6;0,x,8;0,x,9;1,e,7;1,e,10;1,h,4;1,h,7;1,h,8;1,h,9;1,j,1;1,j,2;1,j,3;1,j,4;1,j,7;1,j,8;1,j,9;1,o,0;1,o,2;1,o,3;1,o,6;1,o,7;1,o,9;1,o,10;1,x,1;1,x,3;1,x,5;1,x,7;1,x,8;1,x,9;1,x,10;2,h,0;2,h,4;2,h,5;2,h,7;2,j,4;2,j,5;2,j,6;2,j,8;2,j,9;2,j,10;2,o,0;2,o,1;2,o,5;2,o,6;2,o,7;2,o,8;2,o,10;2,x,0;2,x,1;2,x,2;2,x,5;2,x,6;2,x,7;2,x,9;3,e,5;3,h,0;3,h,2;3,h,3;3,h,6;3,h,7;3,h,8;3,h,10;3,j,1;3,j,2;3,j,5;3,j,9;3,o,2;3,o,4;3,o,5;3,o,6;3,o,8;3,x,4;3,x,5;3,x,6;3,x,8;4,e,8;4,h,4;4,h,5;4,h,6;4,h,7;4,h,8;4,h,10;4,j,0;4,j,3;4,j,4;4,j,7;4,j,8;4,j,9;4,j,10;4,o,1;4,o,6;4,o,7;4,o,8;4,o,9;4,x,1;4,x,2;4,x,8;4,x,10;5,h,3;5,h,4;5,h,6;5,h,8;5,j,2;5,j,3;5,j,4;5,j,6;5,j,7;5,j,10;5,o,3;5,o,4;5,o,5;5,o,6;5,o,8;5,x,0;5,x,1;5,x,4;5,x,8;6,e,4;6,h,5;6,h,7;6,h,8;6,h,9;6,j,1;6,j,2;6,j,3;6,j,4;6,j,7;6,o,0;6,o,2;6,o,3;6,o,4;6,o,7;6,o,10;6,x,0;6,x,4;6,x,8;6,x,10;7,h,1;7,h,2;7,h,4;7,h,10;7,j,1;7,j,3;7,j,4;7,j,5;7,j,7;7,j,8;7,j,9;7,o,0;7,o,1;7,o,2;7,o,4;7,o,5;7,o,8;7,x,1;7,x,2;7,x,3;7,x,4;7,x,5;7,x,8;7,x,10;8,e,5;8,h,0;8,h,1;8,h,3;8,h,6;8,h,7;8,h,9;8,h,10;8,j,0;8,j,1;8,j,2;8,j,3;8,j,5;8,j,7;8,j,8;8,o,1;8,o,2;8,o,4;8,o,6;8,o,8;8,o,9;8,x,0;8,x,1;8,x,3;8,x,4;8,x,5;8,x,6;8,x,10;9,e,10;9,h,1;9,h,5;9,h,6;9,h,7;9,h,8;9,h,9;9,h,10;9,j,1;9,j,5;9,j,6;9,j,7;9,j,9;9,o,1;9,o,2;9,o,3;9,o,5;9,x,1;9,x,2;9,x,4;9,x,5;9,x,8;9,x,9;9,x,10;10,e,2;10,h,1;10,h,2;10,h,4;10,h,5;10,h,7;10,h,9;10,h,10;10,j,0;10,j,3;10,j,5;10,j,8;10,o,0;10,o,1;10,o,4;10,o,6;10,o,9;10,x,0;10,x,1;10,x,5;10,x,6;10,x,8;10,x,9#0#2;4");
		assertEquals("0/1/2/3/4/5/6/7/8/9/10;0/1/2/4/5/7/8/9/10;0/1/2/7/10#h;j;o;x#0/1/2/3/4/5/6/7/8/9/10,h,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,j,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,o,0/1/2/3/4/5/6/7/8/9/10;0/1/2/3/4/5/6/7/8/9/10,x,0/1/2/3/4/5/6/7/8/9/10;0/1/2/4/5/7/8/9/10,h,0/1/2/3/4/5/6/7/8/9/10;0/1/2/4/5/7/8/9/10,j,0/1/2/3/4/5/6/7/8/9/10;0/1/2/4/5/7/8/9/10,o,0/1/2/3/4/5/6/7/8/9/10;0/1/2/4/5/7/8/9/10,x,0/1/2/3/4/5/6/7/8/9/10;0/1/2/7/10,h,0/1/2/4/5/7/8/9/10;0/1/2/7/10,j,0/1/2/3/4/5/6/7/8/9/10;0/1/2/7/10,o,0/1/2/3/4/5/6/7/8/9/10;0/1/2/7/10,x,0/1/2/3/4/5/6/7/8/9/10#0/1/2/7/10#0/1/2/3/4/5/6/7/8/9/10;0/1/2/4/5/7/8/9/10;0/1/2/7/10", nfaToDfa.toString());
	}

	@Test
	public void testNfa8() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#i;p;s#0,p,1;1,e,4;1,e,6;2,s,3;3,e,2;3,e,5;4,e,2;4,e,5;5,e,8;6,i,7;7,e,8;8,i,9;9,s,10#0#10");
		assertEquals("-1;0;1/2/4/5/6/8;2/3/5/8;7/8/9;9;10#i;p;s#-1,i,-1;-1,p,-1;-1,s,-1;0,i,-1;0,p,1/2/4/5/6/8;0,s,-1;1/2/4/5/6/8,i,7/8/9;1/2/4/5/6/8,p,-1;1/2/4/5/6/8,s,2/3/5/8;2/3/5/8,i,9;2/3/5/8,p,-1;2/3/5/8,s,2/3/5/8;7/8/9,i,9;7/8/9,p,-1;7/8/9,s,10;9,i,-1;9,p,-1;9,s,10;10,i,-1;10,p,-1;10,s,-1#0#10", nfaToDfa.toString());
	}

	@Test
	public void testNfa9() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7;8;9;10#g;s;v;z#0,z,1;1,e,10;2,e,3;3,e,4;3,e,6;4,v,5;5,e,4;5,e,6;6,s,7;7,g,8;8,e,10;9,e,0;9,e,2#9#10");
		assertEquals("-1;0/2/3/4/6/9;1/10;4/5/6;7;8/10#g;s;v;z#-1,g,-1;-1,s,-1;-1,v,-1;-1,z,-1;0/2/3/4/6/9,g,-1;0/2/3/4/6/9,s,7;0/2/3/4/6/9,v,4/5/6;0/2/3/4/6/9,z,1/10;1/10,g,-1;1/10,s,-1;1/10,v,-1;1/10,z,-1;4/5/6,g,-1;4/5/6,s,7;4/5/6,v,4/5/6;4/5/6,z,-1;7,g,8/10;7,s,-1;7,v,-1;7,z,-1;8/10,g,-1;8/10,s,-1;8/10,v,-1;8/10,z,-1#0/2/3/4/6/9#1/10;8/10", nfaToDfa.toString());
	}

	@Test
	public void testNfa10() {
		NfaToDfa nfaToDfa= new NfaToDfa("0;1;2;3;4;5;6;7#b;o;z#0,b,0;0,b,1;0,b,3;0,b,5;0,b,7;0,o,0;0,o,4;0,o,5;0,o,6;0,z,0;0,z,1;0,z,2;0,z,4;0,z,5;0,z,6;0,z,7;1,b,1;1,b,2;1,b,3;1,b,4;1,b,5;1,b,6;1,b,7;1,o,1;1,o,2;1,o,3;1,o,6;1,o,7;1,z,1;1,z,3;1,z,4;1,z,7;2,b,0;2,b,1;2,b,6;2,b,7;2,o,0;2,o,1;2,o,3;2,o,5;2,o,6;2,z,1;2,z,4;2,z,5;2,z,6;3,b,0;3,b,1;3,b,2;3,b,3;3,b,4;3,b,6;3,b,7;3,o,0;3,o,1;3,o,2;3,o,5;3,o,7;3,z,0;3,z,4;3,z,5;3,z,6;3,z,7;4,b,2;4,b,4;4,b,6;4,b,7;4,o,0;4,o,1;4,o,2;4,o,3;4,o,5;4,o,6;4,z,0;4,z,1;4,z,2;4,z,5;4,z,6;4,z,7;5,b,1;5,b,2;5,b,4;5,b,7;5,o,3;5,o,5;5,o,6;5,o,7;5,z,1;5,z,2;5,z,3;5,z,4;5,z,5;5,z,6;6,b,0;6,b,1;6,b,4;6,b,5;6,b,6;6,b,7;6,o,1;6,o,2;6,o,3;6,o,4;6,o,5;6,o,6;6,o,7;6,z,0;6,z,1;6,z,2;6,z,3;6,z,4;6,z,6;6,z,7;7,b,2;7,b,3;7,b,6;7,b,7;7,o,0;7,o,3;7,o,4;7,o,6;7,z,0;7,z,1;7,z,2;7,z,3;7,z,4;7,z,5;7,z,7#1#0;2;3;5;6");
		assertEquals("0/1/2/3/4/5/6/7;1;1/2/3/4/5/6/7;1/2/3/6/7;1/3/4/7#b;o;z#0/1/2/3/4/5/6/7,b,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,o,0/1/2/3/4/5/6/7;0/1/2/3/4/5/6/7,z,0/1/2/3/4/5/6/7;1,b,1/2/3/4/5/6/7;1,o,1/2/3/6/7;1,z,1/3/4/7;1/2/3/4/5/6/7,b,0/1/2/3/4/5/6/7;1/2/3/4/5/6/7,o,0/1/2/3/4/5/6/7;1/2/3/4/5/6/7,z,0/1/2/3/4/5/6/7;1/2/3/6/7,b,0/1/2/3/4/5/6/7;1/2/3/6/7,o,0/1/2/3/4/5/6/7;1/2/3/6/7,z,0/1/2/3/4/5/6/7;1/3/4/7,b,0/1/2/3/4/5/6/7;1/3/4/7,o,0/1/2/3/4/5/6/7;1/3/4/7,z,0/1/2/3/4/5/6/7#1#0/1/2/3/4/5/6/7;1/2/3/4/5/6/7;1/2/3/6/7;1/3/4/7", nfaToDfa.toString());
	}

}